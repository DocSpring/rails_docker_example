#!/bin/bash
set -e

# Reset the base image after this many rsync diff layers
MAX_DIFF_LAYERS_COUNT=30
# Reset the base image when rsync diff layers are more than x% of the base layer
MAX_DIFF_SIZE_PERCENTAGE=80

# Build base images first
if [ -z "$(docker images -q demoapp/ruby-node 2> /dev/null)" ]; then
    docker build -t "demoapp/ruby-node" -f docker/Dockerfile.ruby-node .
fi
if [ -z "$(docker images -q demoapp/base 2> /dev/null)" ]; then
    docker build -t "demoapp/base" -f docker/Dockerfile.base .
fi

BASE_IMAGE_ID="$(docker images -q demoapp/app:base-build 2> /dev/null)"
if [ -z "$BASE_IMAGE_ID" ]; then
    echo "No previous builds, starting from demoapp/base..."
    # If there is no previous build, use the base image
    docker tag demoapp/base demoapp/app:base-build
    docker tag demoapp/base demoapp/app:latest-build
    INITIAL_BUILD=true
fi

# Dummy secret key for assets task
SECRET_KEY_BASE=231bf79489c63f8c8facd7bf27db1c25\
82a42a7f4302fccdb74ef35bc5dc91fb4e19dbf167f3003b\
db4073818dfab4a9916890d193d535a7be458dbef1609800

docker build \
    --target assets \
    -t demoapp/app:current-build \
    -f docker/Dockerfile.app \
    --build-arg "SECRET_KEY_BASE=${SECRET_KEY_BASE}" \
    react-webpack-rails-tutorial

# Reset to the gems stage, copy in /app, remove unneeded files, squash layers
docker build \
    -t demoapp/app:current \
    -f docker/Dockerfile.app \
    --build-arg "SECRET_KEY_BASE=${SECRET_KEY_BASE}" \
    --squash \
    react-webpack-rails-tutorial

# Copy assets + cache from this build during the next build
# (Must tag after the squashed build, otherwise it invalidates the cache)
docker tag demoapp/app:current-build demoapp/app:latest-build

if [ -z "$INITIAL_BUILD" ]; then
    IMAGE_LAYERS="$(docker history --human=false demoapp/app:latest \
        --format="{{.Size}} {{.CreatedBy}} {{.Comment}}" 2>/dev/null)"

    DIFF_LAYERS_COUNT="$(echo "$IMAGE_LAYERS" | grep -c "rsync --recursive" || true)"
    DIFF_LAYERS_SIZE="$(
        echo "$IMAGE_LAYERS" | grep "rsync --recursive" |
        awk 'BEGIN{sum=0} {sum+=$1} END {print sum}'
    )"
    BASE_LAYER_SIZE="$(
        echo "$IMAGE_LAYERS" | grep "merge sha256" |
        awk 'BEGIN{sum=0} {sum+=$1} END {print sum}'
    )"
    DIFF_PERCENTAGE=0
    if [ "$BASE_LAYER_SIZE" -gt 0 ]; then
        DIFF_PERCENTAGE=$((100 * DIFF_LAYERS_SIZE / BASE_LAYER_SIZE))
    fi

    echo "Found $DIFF_LAYERS_COUNT rsync diff layers in latest image"
    echo "=> Diff layers size: $(echo "$DIFF_LAYERS_SIZE" | numfmt --to=iec)B"
    echo "=> Base layer size: $(echo "$BASE_LAYER_SIZE" | numfmt --to=iec)B"
    echo "=> Diff layers / Base layer: $DIFF_PERCENTAGE%"
fi

if [ "$INITIAL_BUILD" ] ||
    [ "$DIFF_LAYERS_COUNT" -ge "$MAX_DIFF_LAYERS_COUNT" ] ||
    [ "$DIFF_PERCENTAGE" -gt "$MAX_DIFF_SIZE_PERCENTAGE" ]
then
    if [ "$INITIAL_BUILD" ]; then
        echo "Tagging initial base image for builds with gems, npm packages, assets cache..."
        docker tag demoapp/app:current-build demoapp/app:base-build
    elif [ "$DIFF_LAYERS_COUNT" -ge "$MAX_DIFF_LAYERS_COUNT" ]; then
        echo "Reached the maximum number of rsync diff layers ($MAX_DIFF_LAYERS_COUNT)"
        echo "Resetting base image..."
    else
        echo "Diff layers add up to more than $MAX_DIFF_SIZE_PERCENTAGE% of the base layer"
        echo "Resetting base image..."
    fi

    docker tag demoapp/app:current demoapp/app:latest
else
    echo "Creating a diff layer between :latest and :current..."
    echo "=> To reset the base image and remove all diff layers, run:"
    echo "      docker tag demoapp/app:current demoapp/app:latest"

    # Remove existing volume (if exists)
    docker container rm demoapp-current-volume > /dev/null 2>&1 || true
    # Create a new container from :current with /app as a volume
    docker run --name=demoapp-current-volume \
        --volume /app demoapp/app:current true

    # Find the host directory for the /app volume
    BUILD_VOLUME_DIR="$(docker inspect demoapp-current-volume \
        -f '{{ (index .Mounts 0).Source }}')"

    # Use rsync to add/remove changed files in the demoapp-diff-layer container
    # Adds another rsync layer to the latest image
    docker container rm demoapp-diff-layer > /dev/null 2>&1 || true
    docker run --name=demoapp-diff-layer -it \
        --volume "$BUILD_VOLUME_DIR:/app-current" \
        demoapp/app:latest \
        rsync --recursive --links --progress --checksum --delete --itemize-changes \
            --exclude tmp --exclude log \
            /app-current/ /app/

    # Commit the updated files as a new layer
    docker commit demoapp-diff-layer demoapp/app:latest
fi

echo "Finished building demoapp/app:latest"
