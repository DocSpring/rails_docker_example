FROM demoapp/app:base-build as gems

ADD Gemfile /app/Gemfile
ADD Gemfile.lock /app/Gemfile.lock
# This COPY command is much slower than just installing a couple of new gems.
# COPY --from=demoapp/app:latest-build /app/vendor/bundle /app/vendor/bundle
RUN bundle config --global frozen 1 \
    && bundle install --without development:test -j4 \
        --path vendor/bundle \
        --binstubs vendor/bundle/bin \
        --deployment

FROM gems as assets

# Only add files that affect the assets:precompile task
ADD Rakefile                                /app/Rakefile
ADD config/application.rb                   /app/config/application.rb
ADD config/boot.rb                          /app/config/boot.rb
ADD config/environment.rb                   /app/config/environment.rb
ADD config/environments/production.rb       /app/config/environments/production.rb
ADD config/secrets.yml                      /app/config/secrets.yml
ADD config/initializers/assets.rb           /app/config/initializers/assets.rb
ADD config/initializers/react_on_rails.rb   /app/config/initializers/react_on_rails.rb
ADD config/locales                          /app/config/locales
ADD lib/tasks/assets.rake                   /app/lib/tasks/assets.rake
ADD app/assets                              /app/app/assets
ADD lib/assets                              /app/lib/assets
ADD vendor/assets                           /app/vendor/assets

# Copy assets and cache from the latest build
COPY --from=demoapp/app:latest-build /app/tmp/cache/assets /app/tmp/cache/assets
COPY --from=demoapp/app:latest-build /app/public/assets /app/public/assets

ARG SECRET_KEY_BASE
RUN rake DATABASE_URL=postgresql:does_not_exist assets:precompile

# Reset image to the gems layer, copy everything and remove unneeded files
FROM gems

ADD . /app

# Remove unneeded files
RUN rm -rf app/assets log tmp && mkdir log tmp

COPY --from=assets /app/public/assets /app/public/assets
RUN ln -fs /app/config/nginx.production.conf /etc/nginx/sites-enabled/rails-app

EXPOSE 80
CMD ["foreman", "start"]
